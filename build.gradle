buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
//        classpath 'com.benrhine:slack-alerts-groovy:1.0.0'
    }
}

plugins {
    id 'groovy'
//    id 'com.benrhine.semantic-versioning-with-build-number' version '0.0.2'
    id "com.gradle.plugin-publish" version "1.1.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// https://discuss.gradle.org/t/why-am-i-getting-this-no-matching-variant-failure-message/39248
// https://discuss.gradle.org/t/why-does-my-consumer-prefer-java-8-variant-to-java-11-variant-while-building-with-java-11/39194/4
configurations {
    java11ApiElements {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL)
            attribute Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY)
            attribute LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR)
            attribute Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API)
            attribute TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 11
        }
        outgoing {
            variants {
                classes {
                    artifact(sourceSets.main.java.classesDirectory) {
                        attributes {
                            attribute LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.CLASSES)
                        }
                        type = 'java-classes-directory'
                    }
                }
            }
        }
        extendsFrom(configurations.apiElements)
    }
    java11RuntimeElements {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL)
            attribute Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY)
            attribute LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR)
            attribute Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME)
            attribute TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 11
        }
        outgoing {
            variants {
                classes {
                    artifact(sourceSets.main.java.classesDirectory) {
                        attributes {
                            attribute LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.CLASSES)
                        }
                        type = 'java-classes-directory'
                    }
                }
                resources {
                    artifact(sourceSets.main.output.resourcesDir) {
                        attributes {
                            attribute LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.CLASSES)
                        }
                        type = 'java-resources-directory'
                    }
                }
            }
        }
        extendsFrom(configurations.runtimeElements)
    }
}

ext.vcsUser                                 = System.env.GITHUB_ACTOR   // DO NOT PUT IN PROPERTIES FILE
ext.vcsPass                                 = System.env.GITHUB_TOKEN   // DO NOT PUT IN PROPERTIES FILE

description 'Send static or dynamic alerts to a Slack WebHook or Bot'
group 'com.benrhine'
version "0.0.1-SNAPSHOT"

//apply plugin: 'com.benrhine.slack-alerts-groovy'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation "com.google.code.gson:gson:2.10.1"
    implementation "org.apache.httpcomponents.client5:httpclient5:5.2.1"
}

// Specify plugin properties that apply to the whole publishing bundle (ie. all plugins in the current publication).
pluginBundle {
    website = 'https://benrhine.com'
    vcsUrl = 'https://github.com/benrhine/slack-alerts-groovy'
    description = project.description
    tags = ['slack', 'webhook', 'message', 'bot', 'dynamic', 'alert']
}

gradlePlugin {
    plugins {
        slackAlertsPlugin {
            id = "com.benrhine.slack-alerts-groovy"
            description = project.description
            displayName = 'Slack Alerts using Groovy'
            implementationClass = 'com.benrhine.plugins.v1.SlackAlertsPlugin'
        }
    }
}

task printVersion {
    doLast {
        println "$version"
    }
}

/** --------------------------------------------------------------------------------------------------------------------
 * Publish: Modern way to publish artifacts using the maven-publish plugin (Gradle 7+)
 *
 * Currently ./gradlew publish will publish a usable artifact to the local build folder. Once published the artifact
 * will need to be copied over to the libraries project and pushed to the repository MANUALLY for use. It should
 * be possible to automatically publish the artifact (see commented out repo block) but currently that configuration
 * fails due to an xml parse error.
 *
 * https://www.jetbrains.com/help/idea/add-a-gradle-library-to-the-maven-repository.html#publish_remote
 *
 * ------------------------------------------------------------------------------------------------------------------ */
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/benrhine/libraries")
            credentials {
                username = "$vcsUser"
                password = "$vcsPass"
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
